{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["kakao","window","App","mapContainer","document","getElementById","mapOption","center","maps","LatLng","level","map","Map","positions","content","latlng","i","length","imageSize","Size","markerImage","MarkerImage","marker","Marker","position","image","clickable","infowindow","InfoWindow","removable","event","addListener","makeOverListener","open","class","href","role","type","placeholder","id","style","width","height","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2NAEQA,G,MAAUC,OAAVD,OAuIOE,E,kLAnFb,IA5CE,IAAMC,EAAeC,SAASC,eAAe,SACvCC,EAAY,CAChBC,OAAS,IAAIP,EAAMQ,KAAKC,OAAO,mBAAoB,oBACnDC,MAAO,GAGHC,EAAM,IAAIX,EAAMQ,KAAKI,IAAIT,EAAcG,GAIvCO,EAAY,CAChB,CACIC,QAAS,uCACTC,OAAQ,IAAIf,EAAMQ,KAAKC,OAAO,UAAW,aAE7C,CACIK,QAAS,2BACTC,OAAQ,IAAIf,EAAMQ,KAAKC,OAAO,UAAW,YAE7C,CACIK,QAAS,2BACTC,OAAQ,IAAIf,EAAMQ,KAAKC,OAAO,SAAU,YAE5C,CACIK,QAAS,iCACTC,OAAQ,IAAIf,EAAMQ,KAAKC,OAAO,SAAU,YAE5C,CACEK,QAAS,qBACTC,OAAQ,IAAIf,EAAMQ,KAAKC,OAAO,QAAS,YAE3C,CACEK,QAAS,2BACTC,OAAQ,IAAIf,EAAMQ,KAAKC,OAAO,iBAAkB,qBAEpD,CACEK,QAAS,2BACTC,OAAQ,IAAIf,EAAMQ,KAAKC,OAAO,kBAAmB,sBAO1CO,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IAAM,CAG1C,IAAME,EAAY,IAAIlB,EAAMQ,KAAKW,KAAK,GAAI,IAGpCC,EAAc,IAAIpB,EAAMQ,KAAKa,YARpB,+DAQ0CH,GAGnDI,EAAS,IAAItB,EAAMQ,KAAKe,OAAO,CACjCZ,IAAKA,EACLa,SAAUX,EAAUG,GAAGD,OACvBD,QAAUD,EAAUG,GAAGF,QACvBW,MAAQL,EACRM,WAAW,IAObC,EAAa,IAAI3B,EAAMQ,KAAKoB,WAAW,CACzCd,QAASD,EAAUG,GAAGF,QAEtBe,WANmB,IAYrB7B,EAAMQ,KAAKsB,MAAMC,YAAYT,EAAQ,QAASU,EAAiBrB,EAAKW,EAAQK,IAI9E,SAASK,EAAiBrB,EAAKW,EAAQK,GACrC,OAAO,WACHA,EAAWM,KAAKtB,EAAKW,O,+BAqBvB,OAEA,gCAEA,qBAAKY,MAAM,0BAAX,SACE,sBAAKA,MAAM,kBAAX,UACE,mBAAGA,MAAM,eAAeC,KAAK,IAA7B,gCACF,uBAAMD,MAAM,2BAA2BE,KAAK,SAA5C,UACE,qBAAKF,MAAM,aAAX,SACE,uBAAOG,KAAK,OAAOH,MAAM,eAAeI,YAAY,aAEtD,wBAAQD,KAAK,SAASH,MAAM,kBAA5B,uBAKF,qBAAKK,GAAG,QAAQC,MAAO,CAACC,MAAM,SAAWC,OAAO,kB,GA3HpCC,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpD,SAASC,eAAe,SAM1BwC,M","file":"static/js/main.b2597de9.chunk.js","sourcesContent":["import React from 'react' ;\nimport './App.css';\nconst { kakao } = window;\n\nclass App extends React.Component{\n \n \n\n  componentDidMount() {\n   \n    const mapContainer = document.getElementById('myMap');\n    const mapOption = {\n      center : new kakao.maps.LatLng(35.146869223518685, 126.92022253067874),\n      level: 6\n    };\n\n    const map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\n   \n   \n\n    const positions = [\n      {\n          content: '동구종로약국', \n          latlng: new kakao.maps.LatLng(35.145489, 126.922149)\n      },\n      {\n          content: '푸른약국', \n          latlng: new kakao.maps.LatLng(35.127969, 126.93093)\n      },\n      {\n          content: '피엠약국', \n          latlng: new kakao.maps.LatLng(35.15874, 126.93523)\n      },\n      {\n          content: '보림당약국',\n          latlng: new kakao.maps.LatLng(35.13649, 126.92598)\n      },\n      {\n        content: '팜약국', \n        latlng: new kakao.maps.LatLng(35.1468, 126.91796)\n    },\n    {\n      content: '조은약국', \n      latlng: new kakao.maps.LatLng(35.1340194982549, 126.92634603283939)\n  },\n  {\n    content: '광주약국', \n    latlng: new kakao.maps.LatLng(35.16553604820528, 126.91829830956627)\n},\n      \n  ];\n\n  const imageSrc = \"https://cdn.icon-icons.com/icons2/1749/PNG/512/06_113688.png\"; \n\n  for (var i = 0; i < positions.length; i ++) {\n    \n    // 마커 이미지의 이미지 크기 입니다\n    const imageSize = new kakao.maps.Size(40, 40); \n    \n    // 마커 이미지를 생성합니다    \n    const markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \n    \n    // 마커를 생성합니다\n    const marker = new kakao.maps.Marker({\n        map: map, // 마커를 표시할 지도\n        position: positions[i].latlng, // 마커를 표시할 위치\n        content : positions[i].content, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n        image : markerImage, // 마커 이미지 \n        clickable: true ,\n       \n    });\n\n    var iwRemoveable = true;\n    \n // 마커에 표시할 오버레이를 생성합니다 \n  var infowindow = new kakao.maps.InfoWindow({\n    content: positions[i].content,\n    \n    removable : iwRemoveable\n    // 인포윈도우에 표시할 내용\n  \n  });\n\n   \n  kakao.maps.event.addListener(marker, 'click', makeOverListener(map, marker, infowindow));\n}\n\n// 인포윈도우를 표시하는 클로저를 만드는 함수입니다 \nfunction makeOverListener(map, marker, infowindow) {\n  return function() {\n      infowindow.open(map, marker);\n  };\n}\n\n\n\n\n\n     \n  }\n\n  \n\n\n\n  \n\n  render()\n  {\n   \n\n    return (\n   \n    <div>\n        \n    <nav class=\" narbar navbar-default \">\n      <div class=\"container-fluid\">\n        <a class=\"navbar-brand\" href=\"#\">약쓰리</a>\n      <form class=\"navbar-form navbar-right\" role=\"search\">\n        <div class=\"form-group\">\n          <input type=\"text\" class=\"form-control\" placeholder=\"Search\"></input>\n        </div>\n        <button type=\"submit\" class=\"btn btn-default\">@</button>\n      </form>\n\n        </div>\n      </nav>\n      <div id=\"myMap\" style={{width: `1600px`, height: `700px` }}></div>\n      \n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}